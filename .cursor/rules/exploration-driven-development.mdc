---
description: 
globs: 
alwaysApply: true
---
---
description: 探索重視型開発フロー - 修正前の徹底調査ルール
globs: 
alwaysApply: true
---

# 🔍 Exploration-Driven Development Rules
**ChatFlow 探索重視型開発フロー**

## 🎯 **適用タイミング**

このルールは以下の場面で **強制適用** されます：

### 🚨 **必須適用条件**
- **バグ報告・問題発見時**
- **機能修正・改善提案時**  
- **パフォーマンス問題発生時**
- **データ不整合発見時**
- **セキュリティ懸念発生時**

### ⚠️ **適用対象作業**
- すべての `fix/` ブランチ作業
- すべての `data/` ブランチ作業
- すべての `security/` ブランチ作業
- 緊急度の高い `hotfix/` ブランチ作業

---

## 🔍 **Phase 1: 探索・調査フェーズ (ブランチ作成前)**

### 必須探索手順

#### 1️⃣ **問題の詳細分析 (15-30分)**
```bash
# 🔍 問題特定ツール実行
echo "🔍 ChatFlow 問題探索開始: $(date)"

# 現在の状況確認
npm run status:check
curl -s http://localhost:3001/api/health | jq .

# ログ分析
tail -100 logs/error.log
grep -i "error\|warning\|fail" logs/*.log | tail -20

# データ整合性チェック
npm run data:integrity:check
```

#### 2️⃣ **影響範囲の徹底調査 (20-45分)**
```bash
# 🌐 影響範囲調査ツール
echo "🌐 影響範囲調査開始"

# 関連ファイル特定
grep -r "問題のキーワード" src/ --include="*.ts" 
find src/ -name "*関連サービス*.ts" -exec grep -l "問題の機能" {} \;

# 依存関係調査
npm ls | grep "関連パッケージ"
git log --oneline --grep="関連機能" -10

# API連携調査
grep -r "api/該当エンドポイント" web/src/ --include="*.ts*"
```

#### 3️⃣ **データ影響度評価 (ChatFlow重要)**
```bash
# 💾 データ影響度チェック
echo "💾 データ影響度評価開始"

# SQLite状況確認
sqlite3 data/chat-history.db "SELECT COUNT(*) as total_sessions FROM sessions;"
sqlite3 data/chat-history.db "SELECT COUNT(*) as total_messages FROM messages;"

# ファイルシステム状況
find data/ -name "*.json" | wc -l
du -sh data/

# バックアップ確認
ls -la data/backups/ | head -5
```

#### 4️⃣ **セキュリティリスク評価**
```bash
# 🔒 セキュリティリスク分析
echo "🔒 セキュリティリスク評価開始"

# 機密情報影響確認
./scripts/security-check.sh
grep -r "api.*key\|password\|secret" src/ --include="*.ts" | head -10

# アクセス権限確認
ls -la data/ | grep -v "drw"
find . -name "*.env*" -ls
```

### 📋 **探索結果ドキュメント化 (必須)**

#### **探索レポートテンプレート**
```bash
# テンプレートを使用した探索レポート作成
cp docs/templates/exploration-report-template.md \
   docs/exploration/$(date +%Y%m%d)-[問題名]-exploration.md

# 例：
cp docs/templates/exploration-report-template.md \
   docs/exploration/20250603-session-count-discrepancy-exploration.md
```

**テンプレート必須記入項目**：
- 🎯 問題の詳細（現象・発生条件・影響範囲）
- 🔍 根本原因分析（表面的現象→直接原因→根本原因）
- 🌐 影響範囲詳細（コード・データ・セキュリティ・パフォーマンス）
- 🎯 修正戦略（修正アプローチ・手順・テスト計画）
- ⏱️ 作業時間見積もり（調査・実装・テスト・ドキュメント）
- 🚨 リスク評価（高・中・低リスクの分類と軽減策）

---

## 🚀 **Phase 2: ブランチ作成・修正フェーズ**

### 🌿 **ブランチ作成 (探索完了後のみ)**

```bash
# ✅ 探索レポート完了確認
if [ ! -f "docs/exploration/$(date +%Y%m%d)-[問題名]-exploration.md" ]; then
  echo "❌ 探索レポートが未完成です。Phase 1を完了してください。"
  exit 1
fi

# 🌿 修正ブランチ作成
chat-fix-with-exploration() {
  local fix_name="$1"
  local exploration_report="$2"
  
  echo "🔍 探索結果に基づくブランチ作成: fix/$fix_name"
  
  # 探索レポートの妥当性確認
  if [ ! -f "$exploration_report" ]; then
    echo "❌ 探索レポートが見つかりません: $exploration_report"
    return 1
  fi
  
  # バックアップ作成（データ関連の場合）
  if grep -q "データ影響.*高" "$exploration_report"; then
    echo "💾 データ影響が高いため、バックアップを作成します"
    npm run backup:create
  fi
  
  # ブランチ作成
  git checkout develop
  git pull origin develop
  git checkout -b "fix/$fix_name"
  
  # 探索レポートをコミット
  cp "$exploration_report" "docs/exploration/"
  git add "docs/exploration/"
  git commit -m "docs: 修正前探索レポート - $fix_name"
  
  echo "✅ 修正ブランチ fix/$fix_name 作成完了（探索ベース）"
}
```

### 🔧 **修正作業中のガイドライン**

#### **継続的検証 (修正中)**
```bash
# 修正中の定期チェック
chat-fix-progress-check() {
  echo "🔄 修正進捗チェック: $(date)"
  
  # ビルドチェック
  npm run build
  if [ $? -ne 0 ]; then
    echo "❌ ビルドエラーが発生しました。修正してください。"
    return 1
  fi
  
  # 基本テスト
  npm test
  if [ $? -ne 0 ]; then
    echo "❌ テストが失敗しました。修正してください。"
    return 1
  fi
  
  # セキュリティチェック
  ./scripts/security-check.sh
  if [ $? -ne 0 ]; then
    echo "❌ セキュリティ問題が検出されました。修正してください。"
    return 1
  fi
  
  echo "✅ 修正進捗チェック完了"
}
```

#### **修正完了前チェック**
```bash
# 修正完了確認チェックリスト
chat-fix-completion-check() {
  echo "✅ 修正完了確認チェック開始"
  
  # 1. 包括的テスト
  npm run quality
  npm run test:full
  
  # 2. パフォーマンステスト
  npm run perf:test
  
  # 3. 統合テスト
  npm run server &
  SERVER_PID=$!
  sleep 5
  curl -f http://localhost:3001/api/health
  kill $SERVER_PID
  
  # 4. データ整合性テスト（データ関連修正の場合）
  if git branch | grep -q "data/"; then
    npm run data:integrity:check
  fi
  
  echo "✅ 修正完了確認完了"
}
```

---

## 🧪 **Phase 3: テスト・検証フェーズ**

### 🎯 **段階的テスト戦略**

#### **Level 1: 基礎テスト (必須)**
```bash
# 🧪 基礎テスト実行
chat-basic-test() {
  echo "🧪 基礎テスト開始"
  
  # TypeScript コンパイル
  npm run build
  
  # ESLint + Prettier
  npm run lint
  npm run format:check
  
  # ユニットテスト
  npm test
  
  # セキュリティチェック
  ./scripts/security-check.sh
  
  echo "✅ 基礎テスト完了"
}
```

#### **Level 2: 統合テスト (重要修正)**
```bash
# 🔄 統合テスト実行
chat-integration-test() {
  echo "🔄 統合テスト開始"
  
  # サーバー起動テスト
  npm run server &
  SERVER_PID=$!
  sleep 10
  
  # API テスト
  curl -f http://localhost:3001/api/health
  curl -f http://localhost:3001/api/sessions?page=1&pageSize=5
  curl -f http://localhost:3001/api/stats
  
  # フロントエンド起動テスト
  cd web && npm run build && cd ..
  
  # 後片付け
  kill $SERVER_PID
  
  echo "✅ 統合テスト完了"
}
```

#### **Level 3: パフォーマンステスト (データ・最適化修正)**
```bash
# ⚡ パフォーマンステスト
chat-performance-test() {
  echo "⚡ パフォーマンステスト開始"
  
  # SQLite 性能テスト
  time sqlite3 data/chat-history.db "SELECT COUNT(*) FROM sessions;"
  
  # API 応答時間テスト
  time curl -s http://localhost:3001/api/sessions >/dev/null
  
  # メモリ使用量確認
  ps aux | grep node | grep -v grep
  
  echo "✅ パフォーマンステスト完了"
}
```

### 📊 **テスト結果ドキュメント化**
```bash
# テスト結果レポート作成
cp docs/templates/test-results-template.md \
   docs/test-results/$(date +%Y%m%d)-[ブランチ名]-test-results.md

# 例：
cp docs/templates/test-results-template.md \
   docs/test-results/20250603-fix-session-count-discrepancy-test-results.md
```

**テスト結果レポート必須項目**：
- ✅ Level 1-3 全テスト結果
- 📊 パフォーマンス数値記録
- 🎯 修正効果のBefore/After比較
- 🚦 総合品質判定・マージ推奨度
- 🚨 発見された問題・推奨事項

---

## 🔄 **Phase 4: マージ・デプロイフェーズ**

### 🎯 **マージ前最終確認**

```bash
# 🔍 マージ前最終確認
chat-pre-merge-check() {
  echo "🔍 マージ前最終確認開始"
  
  # 1. 探索レポート存在確認
  if [ ! -f "docs/exploration/$(date +%Y%m%d)*-exploration.md" ]; then
    echo "❌ 探索レポートが見つかりません"
    return 1
  fi
  
  # 2. テスト結果確認
  if [ ! -f "docs/test-results/$(date +%Y%m%d)*-test-results.md" ]; then
    echo "❌ テスト結果レポートが見つかりません"
    return 1
  fi
  
  # 3. 全テスト再実行
  npm run quality && npm test && ./scripts/security-check.sh
  if [ $? -ne 0 ]; then
    echo "❌ 最終テストが失敗しました"
    return 1
  fi
  
  # 4. コミット状況確認
  git status --porcelain
  if [ $? -eq 0 ]; then
    echo "✅ マージ準備完了"
  else
    echo "❌ 未コミットの変更があります"
    return 1
  fi
}
```

### 🚀 **安全マージ実行**

```bash
# 🚀 安全マージ実行
chat-safe-merge() {
  local branch_name=$(git branch --show-current)
  
  echo "🚀 安全マージ実行: $branch_name → main"
  
  # 最終確認実行
  chat-pre-merge-check
  if [ $? -ne 0 ]; then
    echo "❌ マージ前確認が失敗しました。修正してください。"
    return 1
  fi
  
  # develop へマージ（段階的）
  git checkout develop
  git pull origin develop
  git merge "$branch_name" --no-ff -m "fix: $(echo $branch_name | sed 's/fix\///')"
  
  # develop テスト
  npm run integration:test
  if [ $? -ne 0 ]; then
    echo "❌ develop でのテストが失敗しました"
    return 1
  fi
  
  # main へマージ
  git checkout main
  git pull origin main
  git merge develop --no-ff -m "merge: $(echo $branch_name | sed 's/fix\///')"
  
  # 最終確認
  npm run quality
  if [ $? -eq 0 ]; then
    git push origin main
    echo "✅ 安全マージ完了"
  else
    echo "❌ main でのテストが失敗しました。ロールバックを検討してください。"
    return 1
  fi
}
```

---

## 📊 **成功指標・KPI**

### 🎯 **探索重視型開発の効果測定**

```typescript
interface ExplorationDrivenKPIs {
  品質向上: {
    バグ再発率: "目標: 10%以下（探索により根本原因解決）"
    修正の副作用: "目標: 5%以下（影響範囲調査により予防）"
    テスト通過率: "目標: 95%以上（事前調査により品質確保）"
  }
  
  効率向上: {
    修正時間: "目標: 探索時間込みで従来の80%（無駄な試行錯誤削減）"
    手戻り作業: "目標: 50%削減（事前調査により的確な修正）"
    デバッグ時間: "目標: 70%削減（問題の完全理解）"
  }
  
  リスク削減: {
    データ事故: "目標: 90%削減（データ影響評価により予防）"
    セキュリティ事故: "目標: 95%削減（セキュリティリスク評価）"
    システム停止: "目標: 80%削減（影響範囲把握により安全な修正）"
  }
}
```

### 📈 **月次振り返り項目**
```bash
# 月次探索効果レビュー
chat-exploration-review() {
  echo "📈 探索重視型開発 月次レビュー"
  echo "期間: $(date -d '1 month ago' +%Y/%m) - $(date +%Y/%m)"
  
  # 探索レポート数
  find docs/exploration/ -name "*$(date +%Y%m)*" | wc -l
  
  # 修正成功率
  git log --grep="fix:" --since="1 month ago" --oneline | wc -l
  
  # 手戻り作業（revert）
  git log --grep="revert\|rollback" --since="1 month ago" --oneline | wc -l
  
  echo "詳細分析は docs/monthly-review/ を確認"
}
```

---

## 🎊 **まとめ：探索重視型開発の価値**

### ✅ **このルールにより実現される価値**

1. **🔍 問題の完全理解**: 表面的な対症療法ではなく、根本原因の解決
2. **🌐 影響範囲の把握**: 予期しない副作用の予防
3. **💾 データ安全性**: ChatFlowの大切なデータ保護
4. **🔒 セキュリティ向上**: セキュリティリスクの事前評価
5. **⚡ 長期的効率化**: 短期的時間投資による長期的生産性向上

### 🎯 **適用成功の指標**
- **修正品質**: 一度の修正で問題完全解決
- **副作用ゼロ**: 修正による新たな問題の発生なし
- **データ保護**: データ損失・破損事故ゼロ
- **学習効果**: チーム全体の問題解決能力向上

---

**🔍 探索重視型開発でChatFlowの品質と安全性を最高レベルに！**