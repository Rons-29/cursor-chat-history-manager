---
description: 
globs: 
alwaysApply: true
---
# Chat History Manager - Cursor統合ルール

## 📋 基本方針

### 統合の目的
- Cursorのログ保存機能とChat History Managerの効果的な連携
- 開発履歴の包括的な管理と分析
- 生産性向上とナレッジ共有の促進

### 技術スタック
- TypeScript 5.3+
- Node.js 18+
- React 19.1+
- Express.js 5.1+
- TailwindCSS 4.1+

## 🏗️ アーキテクチャ

### 統合アーキテクチャ
```
chat-history-manager/
├── src/
│   ├── services/
│   │   ├── ChatHistoryService.ts    # チャット履歴管理
│   │   ├── CursorLogService.ts      # Cursorログ管理（新規）
│   │   └── IntegrationService.ts    # 統合管理（新規）
│   ├── types/
│   │   └── integration.ts           # 統合型定義（新規）
│   └── server/
│       └── api/
│           └── integration.ts       # 統合API（新規）
└── web/
    └── src/
        ├── components/
        │   └── integration/         # 統合UI（新規）
        └── pages/
            └── dashboard/           # 統合ダッシュボード（新規）
```

## 🔄 統合機能

### 1. ログ監視・同期
- Cursorログの自動監視
- リアルタイム同期
- エラー検出と通知

### 2. データ統合
- ログとチャット履歴の紐付け
- メタデータの統合管理
- 検索インデックスの統合

### 3. 分析・可視化
- 統合ダッシュボード
- 時系列分析
- パフォーマンス指標

## 📊 データモデル

### 統合データ型
```typescript
interface IntegratedLog {
  id: string;
  timestamp: Date;
  type: 'chat' | 'cursor';
  content: string;
  metadata: {
    project?: string;
    tags?: string[];
    source: string;
  };
  relatedLogs?: string[];  // 関連ログのID
}
```

## 🔒 セキュリティ

### データ保護
- 機密情報の自動マスキング
- アクセス制御の実装
- 監査ログの保持

### バックアップ
- 自動バックアップ
- 復元機能
- バージョン管理

## 🎯 品質基準

### パフォーマンス
- API応答時間: < 200ms
- 同期遅延: < 5秒
- メモリ使用量: < 500MB

### 信頼性
- エラー検出率: 99.9%
- データ整合性: 100%
- バックアップ頻度: 24時間

## 📈 モニタリング

### 監視項目
- 同期状態
- エラー発生率
- リソース使用量
- ユーザーアクティビティ

### アラート
- 同期エラー
- パフォーマンス低下
- セキュリティイベント

## 🚀 開発フロー

### 1. 初期化
```typescript
const integrationService = new IntegrationService({
  cursor: {
    enabled: true,
    watchPath: '~/.cursor/logs',
    autoImport: true
  },
  chatHistory: {
    storagePath: '~/.chat-history',
    maxSessions: 1000
  }
});
```

### 2. 同期処理
```typescript
await integrationService.startSync({
  interval: 300,  // 5分
  batchSize: 100,
  retryAttempts: 3
});
```

### 3. 検索
```typescript
const results = await integrationService.search({
  query: 'error',
  timeRange: {
    start: new Date('2024-01-01'),
    end: new Date()
  },
  types: ['chat', 'cursor']
});
```

## 📝 ドキュメント

### 必須ドキュメント
1. 統合アーキテクチャ設計書
2. API仕様書
3. セキュリティガイドライン
4. 運用マニュアル

### コードドキュメント
- すべての公開APIにJSDoc
- 複雑なロジックにコメント
- 変更履歴の記録

## 🔄 メンテナンス

### 定期タスク
- ログローテーション
- パフォーマンス最適化
- セキュリティアップデート
- バックアップ検証

### トラブルシューティング
- エラー診断フロー
- 復旧手順
- サポート連絡先

---

**最終更新**: 2024/01/15  
**次回見直し予定**: 2024/02/15
