# Chat History Manager - Cursor開発ルール
# .mdcルール準拠の一貫した開発品質を保証

## 基本開発方針

### コード品質
- TypeScript厳格モード準拠
- ESLint + Prettier による統一フォーマット
- .mdcルール準拠（段階的実装、堅牢性、ドキュメント化）
- 全ての関数・クラスにコメント必須
- エラーハンドリング必須実装

### アーキテクチャ原則
- サービス層の責務分離
- 型安全性の徹底（any禁止）
- ミドルウェアパターンによる段階的統合
- フォールバック機能の実装

### ファイル命名規則
- サービス: `*Service.ts`
- 型定義: `types/index.ts`
- コンポーネント: `PascalCase.tsx`
- ユーティリティ: `camelCase.ts`

## プロジェクト構造

```
chat-history-manager/
├── src/                     # CLI + バックエンド
│   ├── cli.ts              # CLIエントリーポイント
│   ├── index.ts            # メインインデックス
│   ├── services/           # ビジネスロジック
│   ├── server/             # Express サーバー
│   │   ├── app.ts          # Express アプリ
│   │   ├── api-router.ts   # データサービス
│   │   ├── routes/         # API ルート
│   │   └── middleware/     # ミドルウェア
│   ├── types/              # 型定義
│   └── utils/              # ユーティリティ
├── web/                    # React フロントエンド
│   ├── src/
│   │   ├── components/     # UIコンポーネント
│   │   ├── pages/          # ページコンポーネント
│   │   ├── hooks/          # カスタムフック
│   │   └── api/            # API クライアント
│   └── index.html
├── scripts/                # 運用スクリプト
└── docs/                   # ドキュメント
```

## 開発ガイドライン

### 新機能開発時
1. 型定義から開始
2. サービス層実装
3. API層実装
4. UI層実装
5. テスト・ドキュメント作成

### エラーハンドリング
- 全ての非同期処理にtry-catch
- ユーザーフレンドリーなエラーメッセージ
- ログ出力の統一
- フォールバック機能の実装

### API設計
- RESTful設計原則
- 適切なHTTPステータスコード
- 一貫したレスポンス形式
- バリデーション必須

### UI開発
- React 18+ Hooks中心
- TypeScript型定義必須
- TailwindCSS利用
- アクセシビリティ配慮

## 技術スタック

### バックエンド
- Node.js 18+
- TypeScript 5.3+
- Express.js 5.1+
- fs-extra (ファイル操作)

### フロントエンド
- React 19.1+
- TypeScript
- Vite 6.3+
- TailwindCSS 4.1+
- @tanstack/react-query 5.79+
- React Router 7.6+

### 開発ツール
- ESLint 8.56+
- Prettier 3.5+
- Jest 29.7+ (テスト)
- Concurrently 9.1+ (開発環境)

## コマンド・スクリプト

### 開発コマンド
```bash
npm run dev:full     # フルスタック開発環境
npm run server       # APIサーバーのみ
npm run web          # フロントエンドのみ
npm run build        # TypeScriptビルド
npm run web:build    # フロントエンドビルド
```

### 運用スクリプト
```bash
scripts/auto-start.sh  # 自動起動
scripts/stop.sh        # 安全停止
```

### CLIツール
```bash
npm start              # CLI実行
node dist/cli.js       # 直接実行
```

## 品質基準

### コード品質
- TypeScript厳格モード: 100%準拠
- ESLintエラー: 0件
- テストカバレッジ: 80%以上
- ドキュメント: 全パブリック関数

### パフォーマンス
- API応答時間: < 200ms
- フロントエンド初期ロード: < 3秒
- メモリ使用量: < 500MB

### セキュリティ
- 入力値バリデーション必須
- ファイルパスサニタイズ
- CORS適切設定
- 機密情報ログ出力禁止

## 実装パターン

### サービスクラス
```typescript
export class XxxService {
  private initialized = false
  
  async initialize(): Promise<void> {
    // 初期化処理
    this.initialized = true
  }
  
  async method(): Promise<Result> {
    if (!this.initialized) {
      throw new Error('サービスが初期化されていません')
    }
    // ビジネスロジック
  }
}
```

### API エンドポイント
```typescript
router.get('/endpoint', async (req, res) => {
  try {
    const result = await service.method()
    res.json(result)
  } catch (error) {
    console.error('API Error:', error)
    res.status(500).json({
      error: 'エラーメッセージ',
      message: error.message
    })
  }
})
```

### React コンポーネント
```typescript
interface Props {
  // 型定義必須
}

export const Component: React.FC<Props> = ({ props }) => {
  // React Query利用推奨
  const { data, error, isLoading } = useQuery({
    queryKey: ['key'],
    queryFn: apiCall
  })
  
  // エラー・ローディング状態の適切な処理
  if (error) return <ErrorComponent />
  if (isLoading) return <LoadingComponent />
  
  return <div>...</div>
}
```

## 禁止事項

- `any` 型の使用
- console.log の本番残留
- 未処理のPromise
- インライン スタイル
- ハードコードされた設定値
- 適切でないファイル名

## 推奨事項

- 小さく分割された関数・コンポーネント
- 明確な命名規則
- 適切なコメント・ドキュメント
- 段階的なリファクタリング
- ユーザビリティの重視 