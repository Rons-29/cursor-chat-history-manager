/**
 * AI対話記録のメタデータ自動生成・強化ユーティリティ
 */

import path from 'path'
import { TitleGenerator, TitleGenerationResult } from './TitleGenerator.js'
import {
  EnhancedSessionMetadata,
  SessionCategory,
  MetadataGenerationContext,
  EnhancedMessage,
  MessageIntent,
  CodeBlock,
} from '../types/EnhancedSession.js'

export class MetadataEnhancer {
  /**
   * セッションのメタデータを強化
   */
  static enhanceSessionMetadata(
    messages: any[],
    originalMetadata: any,
    context?: MetadataGenerationContext
  ): EnhancedSessionMetadata {
    try {
      // タイトル生成情報の取得
      const titleResult = this.generateTitleInfo(messages)

      // プロジェクト情報の自動取得
      const projectInfo = this.extractProjectInfo(context)

      // 対話分析の実行
      const dialogAnalysis = this.analyzeDialog(messages)

      // トピック・カテゴリの分類
      const classification = this.classifyContent(messages, titleResult)

      // 統計情報の計算
      const statistics = this.calculateStatistics(messages)

      // スマートタグの生成
      const smartTags = this.generateSmartTags(
        messages,
        classification,
        projectInfo
      )

      return {
        // 基本情報
        source: originalMetadata.source || 'unknown',
        originalTimestamp:
          originalMetadata.originalTimestamp || new Date().toISOString(),

        // プロジェクト情報
        ...projectInfo,

        // トピック分類
        ...classification,

        // 対話分析
        ...dialogAnalysis,

        // 解決状況（後で機械学習で改善予定）
        resolved: this.detectResolutionStatus(messages),
        followUpNeeded: this.detectFollowUpNeeds(messages),
        actionItems: this.extractActionItems(messages),

        // 統計情報
        ...statistics,

        // スマートタグ
        tags: originalMetadata.tags || [],
        autoGeneratedTags: smartTags,

        // 要約・検索用
        summary: this.generateSummary(messages, titleResult),
        keywords: titleResult.keywords,

        // 関連性（将来的に実装）
        relatedSessions: [],
        suggestedActions: this.generateSuggestedActions(
          messages,
          classification
        ),

        // タイトル生成情報
        titleGeneration: {
          confidence: titleResult.confidence,
          autoGenerated: true,
          fallbackUsed: titleResult.confidence === 'low',
        },
      }
    } catch (error) {
      console.warn('メタデータ強化エラー:', error)
      return this.createFallbackMetadata(originalMetadata)
    }
  }

  /**
   * タイトル情報の生成
   */
  private static generateTitleInfo(messages: any[]): TitleGenerationResult {
    return TitleGenerator.generateTitleFromMessages(messages)
  }

  /**
   * プロジェクト情報の抽出
   */
  private static extractProjectInfo(context?: MetadataGenerationContext) {
    if (!context) return {}

    const project = context.projectPath
      ? path.basename(context.projectPath)
      : undefined

    return {
      project,
      projectPath: context.projectPath,
      currentFile: context.recentFiles?.[0],
    }
  }

  /**
   * 対話の分析
   */
  private static analyzeDialog(messages: any[]) {
    const userMessages = messages.filter(m => m.role === 'user')
    if (userMessages.length === 0) {
      return {
        questionType: 'general' as const,
        complexity: 'simple' as const,
      }
    }

    // 最初のユーザーメッセージから質問タイプを判定
    const firstUserMessage = userMessages[0].content
    const questionType = this.detectQuestionType(firstUserMessage)

    // 複雑度の判定
    const complexity = this.calculateComplexity(messages)

    return { questionType, complexity }
  }

  /**
   * 質問タイプの検出
   */
  private static detectQuestionType(
    content: string
  ): EnhancedSessionMetadata['questionType'] {
    const lowerContent = content.toLowerCase()

    if (
      lowerContent.includes('評価') ||
      lowerContent.includes('点数') ||
      lowerContent.includes('採点')
    ) {
      return 'evaluation'
    }
    if (
      lowerContent.includes('エラー') ||
      lowerContent.includes('バグ') ||
      lowerContent.includes('問題')
    ) {
      return 'debugging'
    }
    if (
      lowerContent.includes('方法') ||
      lowerContent.includes('やり方') ||
      lowerContent.includes('どうやって')
    ) {
      return 'how-to'
    }
    if (
      lowerContent.includes('作って') ||
      lowerContent.includes('実装して') ||
      lowerContent.includes('お願い')
    ) {
      return 'request'
    }

    return 'general'
  }

  /**
   * 複雑度の計算
   */
  private static calculateComplexity(
    messages: any[]
  ): EnhancedSessionMetadata['complexity'] {
    let score = 0

    // メッセージ数による複雑度
    score += messages.length * 5

    // コードブロックの存在
    const codeBlockCount = messages.reduce((count, msg) => {
      return count + (msg.content.match(/```/g)?.length || 0) / 2
    }, 0)
    score += codeBlockCount * 15

    // 文字数による複雑度
    const totalChars = messages.reduce(
      (total, msg) => total + msg.content.length,
      0
    )
    score += totalChars / 100

    // 技術用語の密度
    const techTerms = [
      'API',
      'データベース',
      'React',
      'TypeScript',
      'SQL',
      'エラー',
      '実装',
    ]
    const techTermCount = messages.reduce((count, msg) => {
      return count + techTerms.filter(term => msg.content.includes(term)).length
    }, 0)
    score += techTermCount * 10

    if (score >= 100) return 'complex'
    if (score >= 50) return 'medium'
    return 'simple'
  }

  /**
   * コンテンツの分類
   */
  private static classifyContent(
    messages: any[],
    titleResult: TitleGenerationResult
  ) {
    const content = messages
      .map(m => m.content)
      .join(' ')
      .toLowerCase()

    // カテゴリの判定
    let category: SessionCategory = 'other'

    if (
      content.includes('実装') ||
      content.includes('コード') ||
      content.includes('開発')
    ) {
      category = 'development'
    } else if (
      content.includes('エラー') ||
      content.includes('バグ') ||
      content.includes('問題')
    ) {
      category = 'debugging'
    } else if (
      content.includes('設計') ||
      content.includes('アーキテクチャ') ||
      content.includes('構造')
    ) {
      category = 'design'
    } else if (content.includes('テスト') || content.includes('品質')) {
      category = 'testing'
    } else if (content.includes('デプロイ') || content.includes('運用')) {
      category = 'deployment'
    } else if (
      content.includes('学習') ||
      content.includes('勉強') ||
      content.includes('調査')
    ) {
      category = 'learning'
    } else if (
      content.includes('相談') ||
      content.includes('アドバイス') ||
      content.includes('意見')
    ) {
      category = 'consultation'
    }

    // トピックの生成
    const topic = this.generateTopic(titleResult, category)

    return { category, topic }
  }

  /**
   * トピックの生成
   */
  private static generateTopic(
    titleResult: TitleGenerationResult,
    category: SessionCategory
  ): string {
    if (titleResult.keywords.length > 0) {
      return titleResult.keywords[0]
    }

    const categoryTopics = {
      development: '実装・開発',
      debugging: 'エラー対応',
      design: '設計・アーキテクチャ',
      testing: 'テスト・品質保証',
      deployment: 'デプロイ・運用',
      learning: '学習・調査',
      consultation: '相談・アドバイス',
      other: '一般',
    }

    return categoryTopics[category]
  }

  /**
   * 統計情報の計算
   */
  private static calculateStatistics(messages: any[]) {
    const userMessages = messages.filter(m => m.role === 'user')
    const assistantMessages = messages.filter(m => m.role === 'assistant')

    const totalCharacters = messages.reduce(
      (total, msg) => total + msg.content.length,
      0
    )

    const codeBlocks = messages.reduce((count, msg) => {
      return count + (msg.content.match(/```/g)?.length || 0) / 2
    }, 0)

    return {
      totalMessages: messages.length,
      userMessageCount: userMessages.length,
      assistantMessageCount: assistantMessages.length,
      totalCharacters,
      codeBlocks: Math.floor(codeBlocks),
    }
  }

  /**
   * スマートタグの生成
   */
  private static generateSmartTags(
    messages: any[],
    classification: { category: SessionCategory; topic?: string },
    projectInfo: any
  ): string[] {
    const tags: string[] = []

    // カテゴリベースのタグ
    tags.push(classification.category)

    // プロジェクトタグ
    if (projectInfo.project) {
      tags.push(projectInfo.project)
    }

    // 技術スタックの検出
    const content = messages.map(m => m.content).join(' ')
    const techStack = [
      'React',
      'TypeScript',
      'Node.js',
      'Express',
      'SQLite',
      'JavaScript',
      'HTML',
      'CSS',
      'API',
      'データベース',
    ]

    techStack.forEach(tech => {
      if (content.includes(tech)) {
        tags.push(tech.toLowerCase())
      }
    })

    // 重複を除去して返却
    return [...new Set(tags)]
  }

  /**
   * 解決状況の検出（簡易版）
   */
  private static detectResolutionStatus(messages: any[]): boolean {
    const lastMessages = messages.slice(-2)
    const content = lastMessages
      .map(m => m.content)
      .join(' ')
      .toLowerCase()

    const resolvedKeywords = [
      'ありがとう',
      '解決',
      '完了',
      '成功',
      'うまくいきました',
    ]
    return resolvedKeywords.some(keyword => content.includes(keyword))
  }

  /**
   * フォローアップの必要性検出
   */
  private static detectFollowUpNeeds(messages: any[]): boolean {
    const lastMessage = messages[messages.length - 1]
    if (!lastMessage) return false

    const content = lastMessage.content.toLowerCase()
    const followUpKeywords = ['続き', '次に', 'もう少し', 'さらに', '他に']

    return followUpKeywords.some(keyword => content.includes(keyword))
  }

  /**
   * アクションアイテムの抽出
   */
  private static extractActionItems(messages: any[]): string[] {
    const actionItems: string[] = []

    messages.forEach(msg => {
      const content = msg.content

      // 「〜してください」「〜しましょう」のパターンを検索
      const actionPatterns = [
        /([^。]*(?:してください|しましょう|する必要があります)[^。]*)/g,
        /([^。]*(?:TODO|作業|実装|修正)[^。]*)/g,
      ]

      actionPatterns.forEach(pattern => {
        const matches = content.match(pattern)
        if (matches) {
          actionItems.push(...matches.slice(0, 3)) // 最大3個まで
        }
      })
    })

    return actionItems.slice(0, 5) // 最大5個まで
  }

  /**
   * 要約の生成
   */
  private static generateSummary(
    messages: any[],
    titleResult: TitleGenerationResult
  ): string {
    if (messages.length === 0) return ''

    const firstUserMessage = messages.find(m => m.role === 'user')
    if (!firstUserMessage) return ''

    const content = firstUserMessage.content
    const summary =
      content.length > 100 ? content.substring(0, 97) + '...' : content

    return summary
  }

  /**
   * 提案アクションの生成
   */
  private static generateSuggestedActions(
    messages: any[],
    classification: { category: SessionCategory }
  ): string[] {
    const suggestions: string[] = []

    const categoryActions = {
      development: [
        'コードレビューの実施',
        '単体テストの作成',
        'ドキュメント更新',
      ],
      debugging: ['エラーログの確認', 'デバッグ手順の記録', '再現手順の作成'],
      design: [
        '設計ドキュメント作成',
        'レビュー会議の開催',
        'プロトタイプ作成',
      ],
      testing: ['テストケース追加', 'カバレッジ確認', 'テスト自動化'],
      deployment: ['本番環境確認', 'ロールバック手順確認', 'モニタリング設定'],
      learning: ['参考資料の整理', '学習メモの作成', '実践的な練習'],
      consultation: ['意見の整理', '関係者への共有', '次回相談の予定'],
      other: ['関連情報の調査', 'ドキュメント化', 'フォローアップ'],
    }

    return categoryActions[classification.category] || []
  }

  /**
   * フォールバックメタデータの作成
   */
  private static createFallbackMetadata(
    originalMetadata: any
  ): EnhancedSessionMetadata {
    return {
      source: originalMetadata.source || 'unknown',
      originalTimestamp:
        originalMetadata.originalTimestamp || new Date().toISOString(),
      category: 'other',
      questionType: 'general',
      complexity: 'simple',
      resolved: false,
      followUpNeeded: false,
      totalMessages: originalMetadata.totalMessages || 0,
      userMessageCount: 0,
      assistantMessageCount: 0,
      totalCharacters: 0,
      codeBlocks: 0,
      tags: originalMetadata.tags || [],
      autoGeneratedTags: [],
      keywords: [],
      suggestedActions: [],
    }
  }
}
