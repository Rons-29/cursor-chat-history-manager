import React from 'react'
import { 
  ChatBubbleLeftIcon, 
  CodeBracketIcon, 
  ClockIcon,
  TagIcon,
  CheckCircleIcon,
  ExclamationCircleIcon,
  QuestionMarkCircleIcon
} from '@heroicons/react/24/outline'

interface EnhancedSessionMetadata {
  source: string
  project?: string
  topic?: string
  category: string
  questionType: string
  complexity: 'simple' | 'medium' | 'complex'
  resolved: boolean
  followUpNeeded: boolean
  totalMessages: number
  codeBlocks: number
  autoGeneratedTags: string[]
  summary?: string
  keywords: string[]
  titleGeneration?: {
    confidence: 'high' | 'medium' | 'low'
    autoGenerated: boolean
  }
}

interface EnhancedSession {
  id: string
  title: string
  startTime: string
  metadata: EnhancedSessionMetadata
}

interface EnhancedSessionCardProps {
  readonly session: EnhancedSession
  readonly onSelect: (id: string) => void
  readonly showPreview?: boolean
  readonly compact?: boolean
}

export const EnhancedSessionCard: React.FC<EnhancedSessionCardProps> = ({ 
  session, 
  onSelect, 
  showPreview = true,
  compact = false 
}) => {
  const { metadata } = session

  // カテゴリーアイコンの取得
  const getCategoryIcon = (category: string) => {
    const iconProps = "w-4 h-4"
    switch (category) {
      case 'development': return <CodeBracketIcon className={iconProps} />
      case 'debugging': return <ExclamationCircleIcon className={iconProps} />
      case 'consultation': return <ChatBubbleLeftIcon className={iconProps} />
      default: return <QuestionMarkCircleIcon className={iconProps} />
    }
  }

  // 複雑度の色の取得
  const getComplexityColor = (complexity: string) => {
    switch (complexity) {
      case 'simple': return 'text-green-600 bg-green-50'
      case 'medium': return 'text-yellow-600 bg-yellow-50'
      case 'complex': return 'text-red-600 bg-red-50'
      default: return 'text-gray-600 bg-gray-50'
    }
  }

  // タイトル信頼度の表示
  const getTitleConfidenceIndicator = () => {
    if (!metadata.titleGeneration?.autoGenerated) return null
    
    const confidence = metadata.titleGeneration.confidence
    const colors = {
      high: 'text-green-500',
      medium: 'text-yellow-500', 
      low: 'text-red-500'
    }
    
    return (
      <span className={`text-xs ${colors[confidence]} ml-1`} title={`タイトル信頼度: ${confidence}`}>
        ●
      </span>
    )
  }

  // 時間フォーマット
  const formatTime = (dateString: string) => {
    try {
      const date = new Date(dateString)
      return date.toLocaleString('ja-JP', {
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit',
      })
    } catch {
      return '不明'
    }
  }

  return (
    <div 
      className="bg-white border border-gray-200 rounded-lg p-4 hover:bg-gray-50 transition-colors cursor-pointer shadow-sm hover:shadow-md"
      onClick={() => onSelect(session.id)}
      role="button"
      tabIndex={0}
      onKeyDown={(e) => e.key === 'Enter' && onSelect(session.id)}
    >
      {/* ヘッダー部分 */}
      <div className="flex items-start justify-between mb-3">
        <div className="flex-1 min-w-0">
          <h3 className="font-semibold text-gray-900 text-sm leading-tight mb-1 flex items-center">
            <span className="truncate">{session.title}</span>
            {getTitleConfidenceIndicator()}
          </h3>
          
          {/* 要約表示 */}
          {showPreview && metadata.summary && (
            <p className="text-xs text-gray-600 mb-2 line-clamp-2">
              {metadata.summary}
            </p>
          )}
        </div>
        
        {/* 解決状況 */}
        <div className="flex items-center space-x-1 ml-2">
          {metadata.resolved && (
            <CheckCircleIcon className="w-4 h-4 text-green-500" title="解決済み" />
          )}
          {metadata.followUpNeeded && (
            <ClockIcon className="w-4 h-4 text-orange-500" title="フォローアップ必要" />
          )}
        </div>
      </div>

      {/* メタデータ情報 */}
      <div className="space-y-2">
        {/* プロジェクト・トピック・カテゴリ */}
        <div className="flex items-center space-x-3 text-xs">
          <div className="flex items-center space-x-1">
            {getCategoryIcon(metadata.category)}
            <span className="text-gray-600">{metadata.category}</span>
          </div>
          
          {metadata.project && (
            <span className="px-2 py-1 bg-blue-100 text-blue-700 rounded text-xs font-medium">
              {metadata.project}
            </span>
          )}
          
          {metadata.topic && (
            <span className="text-gray-500">
              {metadata.topic}
            </span>
          )}
        </div>

        {/* 統計情報 */}
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-4 text-xs text-gray-500">
            <div className="flex items-center space-x-1">
              <ChatBubbleLeftIcon className="w-3 h-3" />
              <span>{metadata.totalMessages}メッセージ</span>
            </div>
            
            {metadata.codeBlocks > 0 && (
              <div className="flex items-center space-x-1">
                <CodeBracketIcon className="w-3 h-3" />
                <span>{metadata.codeBlocks}コード</span>
              </div>
            )}
            
            <span className={`px-1.5 py-0.5 rounded text-xs ${getComplexityColor(metadata.complexity)}`}>
              {metadata.complexity}
            </span>
          </div>
          
          <div className="text-xs text-gray-400">
            {formatTime(session.startTime)}
          </div>
        </div>

        {/* タグ表示 */}
        {metadata.autoGeneratedTags.length > 0 && (
          <div className="flex flex-wrap gap-1">
            {metadata.autoGeneratedTags.slice(0, 4).map((tag, index) => (
              <span
                key={index}
                className="inline-flex items-center px-2 py-1 text-xs bg-gray-100 text-gray-700 rounded-full"
              >
                <TagIcon className="w-3 h-3 mr-1" />
                {tag}
              </span>
            ))}
            {metadata.autoGeneratedTags.length > 4 && (
              <span className="text-xs text-gray-500">
                +{metadata.autoGeneratedTags.length - 4}
              </span>
            )}
          </div>
        )}

        {/* 質問タイプ・キーワード */}
        {showPreview && !compact && (
          <div className="flex items-center justify-between text-xs">
            <div className="flex items-center space-x-2">
              <span className="text-gray-500">質問タイプ:</span>
              <span className="text-gray-700 font-medium">{metadata.questionType}</span>
            </div>
            
            {metadata.keywords.length > 0 && (
              <div className="flex items-center space-x-1">
                <span className="text-gray-500">キーワード:</span>
                <span className="text-gray-700">{metadata.keywords.slice(0, 2).join(', ')}</span>
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  )
}

export default EnhancedSessionCard 